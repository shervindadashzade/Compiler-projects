
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALBRAC ARBRAC CHAR CHARV COL COM DIVIDE DO DOT ELSE EQUALS FALSE FLOAT FOR ID IF INCLUDE INT IS LAND LBRAC LPAREN MINUS NAME NEWLINE NOT NUMBER PERC PLUS POW QUOT RBRAC RETURN RPAREN SEMI SHARP SLBRAC SRBRAC THEN TIMES TRUE WHILEstmt_list : stmt\n    | stmt_list stmtstmt : include \n    | vardec\n    | assaign\n    | if\n    | while\n    | do_while\n    | forinclude : SHARP INCLUDE ALBRAC ID DOT ID ARBRAC types : INT \n    | FLOAT \n   | CHARvalues : NUMBER DOT NUMBER\n    | NUMBER\n    | CHARV\n     vardec :  types ID vardec2 vardec2 : SEMI\n    | EQUALS others_vardec2\n    others_vardec2 : values SEMI\n    | exp SEMI \n     exp : exp PLUS term\n    | exp MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | term POW factor\n    | factor\n    factor : NUMBER\n    | ID\n    | LPAREN exp RPAREN\n    con_exp : con_exp ALBRAC other_con_exp\n    | con_exp ARBRAC other_con_exp\n    | con_exp EQUALS EQUALS other_con_exp\n    | con_exp NOT other_con_term2\n    | con_term\n    other_con_exp : con_term\n    | EQUALS con_term\n    other_con_term2 : ALBRAC other_con_exp \n    | ARBRAC other_con_exp\n    | other_con_exp\n    con_term : ID\n    | NUMBER\n    | LPAREN con_exp RPAREN\n    | FALSE\n    | TRUE\n    assaign : ID EQUALS other_assaign\n    other_assaign : values SEMI\n    | exp SEMI\n     if : IF LPAREN con_exp RPAREN LBRAC stmt_list others_if\n    others_if : RBRAC \n    | RBRAC ELSE LBRAC stmt_list RBRAC\n     while : WHILE LPAREN con_exp RPAREN LBRAC stmt_list RBRAC\n     do_while : DO LBRAC stmt_list RBRAC WHILE LPAREN con_exp RPAREN\n     for : FOR LPAREN foropt1 foropt2 foropt3 RPAREN LBRAC stmt_list RBRAC\n    foropt1 : assaign\n    | vardec\n    | SEMI\n    foropt2 : con_exp SEMI\n    | SEMI\n    foropt3 : assaign\n    | SEMI\n    '
    
_lr_action_items = {'SHARP':([0,1,2,3,4,5,6,7,8,9,20,26,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[10,10,-1,-3,-4,-5,-6,-7,-8,-9,-2,10,-47,-17,-18,10,-48,-49,-19,-20,-21,10,10,10,10,-10,-50,-51,-53,10,-54,10,10,-55,10,-52,]),'ID':([0,1,2,3,4,5,6,7,8,9,12,17,18,19,20,22,24,25,26,27,28,30,37,38,39,40,41,49,50,51,52,53,55,56,57,58,60,61,62,65,70,71,73,76,78,79,87,88,90,93,95,97,99,100,105,107,112,113,115,116,117,118,120,122,123,124,125,126,127,],[11,11,-1,-3,-4,-5,-6,-7,-8,-9,23,-11,-12,-13,-2,29,44,44,11,11,54,-47,29,-17,-18,29,44,11,44,-56,-57,-58,-48,-49,29,29,29,29,29,-19,44,44,44,11,-60,106,-20,-21,11,44,44,44,44,11,-59,11,11,44,-10,-50,-51,-53,11,-54,11,11,-55,11,-52,]),'IF':([0,1,2,3,4,5,6,7,8,9,20,26,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[13,13,-1,-3,-4,-5,-6,-7,-8,-9,-2,13,-47,-17,-18,13,-48,-49,-19,-20,-21,13,13,13,13,-10,-50,-51,-53,13,-54,13,13,-55,13,-52,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,20,26,30,38,39,49,55,56,65,75,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[14,14,-1,-3,-4,-5,-6,-7,-8,-9,-2,14,-47,-17,-18,14,-48,-49,-19,101,-20,-21,14,14,14,14,-10,-50,-51,-53,14,-54,14,14,-55,14,-52,]),'DO':([0,1,2,3,4,5,6,7,8,9,20,26,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[15,15,-1,-3,-4,-5,-6,-7,-8,-9,-2,15,-47,-17,-18,15,-48,-49,-19,-20,-21,15,15,15,15,-10,-50,-51,-53,15,-54,15,15,-55,15,-52,]),'FOR':([0,1,2,3,4,5,6,7,8,9,20,26,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[16,16,-1,-3,-4,-5,-6,-7,-8,-9,-2,16,-47,-17,-18,16,-48,-49,-19,-20,-21,16,16,16,16,-10,-50,-51,-53,16,-54,16,16,-55,16,-52,]),'INT':([0,1,2,3,4,5,6,7,8,9,20,26,27,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[17,17,-1,-3,-4,-5,-6,-7,-8,-9,-2,17,17,-47,-17,-18,17,-48,-49,-19,-20,-21,17,17,17,17,-10,-50,-51,-53,17,-54,17,17,-55,17,-52,]),'FLOAT':([0,1,2,3,4,5,6,7,8,9,20,26,27,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[18,18,-1,-3,-4,-5,-6,-7,-8,-9,-2,18,18,-47,-17,-18,18,-48,-49,-19,-20,-21,18,18,18,18,-10,-50,-51,-53,18,-54,18,18,-55,18,-52,]),'CHAR':([0,1,2,3,4,5,6,7,8,9,20,26,27,30,38,39,49,55,56,65,87,88,90,100,107,112,115,116,117,118,120,122,123,124,125,126,127,],[19,19,-1,-3,-4,-5,-6,-7,-8,-9,-2,19,19,-47,-17,-18,19,-48,-49,-19,-20,-21,19,19,19,19,-10,-50,-51,-53,19,-54,19,19,-55,19,-52,]),'$end':([1,2,3,4,5,6,7,8,9,20,30,38,39,55,56,65,87,88,115,116,117,118,122,125,127,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-2,-47,-17,-18,-48,-49,-19,-20,-21,-10,-50,-51,-53,-54,-55,-52,]),'RBRAC':([2,3,4,5,6,7,8,9,20,30,38,39,49,55,56,65,87,88,107,112,115,116,117,118,122,123,125,126,127,],[-1,-3,-4,-5,-6,-7,-8,-9,-2,-47,-17,-18,75,-48,-49,-19,-20,-21,117,118,-10,-50,-51,-53,-54,125,-55,127,-52,]),'INCLUDE':([10,],[21,]),'EQUALS':([11,23,42,43,44,45,46,47,48,68,70,71,72,73,77,89,91,92,94,95,96,97,98,99,108,109,110,111,119,],[22,40,72,-36,-42,-43,-45,-46,72,72,93,93,95,93,72,-44,-32,-37,-33,93,-35,93,-41,93,-38,-34,-39,-40,72,]),'LPAREN':([13,14,16,22,24,25,30,37,38,39,40,41,50,51,52,53,55,56,57,58,60,61,62,65,70,71,73,87,88,93,95,97,99,101,113,],[24,25,27,37,41,41,-47,37,-17,-18,37,41,41,-56,-57,-58,-48,-49,37,37,37,37,37,-19,41,41,41,-20,-21,41,41,41,41,113,41,]),'LBRAC':([15,69,74,114,121,],[26,90,100,120,124,]),'ALBRAC':([21,42,43,44,45,46,47,48,68,73,77,89,91,92,94,96,98,108,109,110,111,119,],[28,70,-36,-42,-43,-45,-46,70,70,97,70,-44,-32,-37,-33,-35,-41,-38,-34,-39,-40,70,]),'NUMBER':([22,24,25,30,37,38,39,40,41,50,51,52,53,55,56,57,58,59,60,61,62,65,70,71,73,87,88,93,95,97,99,113,],[33,45,45,-47,64,-17,-18,33,45,45,-56,-57,-58,-48,-49,64,64,82,64,64,64,-19,45,45,45,-20,-21,45,45,45,45,45,]),'CHARV':([22,40,],[34,34,]),'SEMI':([23,27,29,30,31,32,33,34,35,36,38,39,43,44,45,46,47,50,51,52,53,55,56,64,65,66,67,76,77,78,80,81,82,83,84,85,86,87,88,89,91,92,94,96,98,105,108,109,110,111,],[39,53,-30,-47,55,56,-15,-16,-24,-28,-17,-18,-36,-42,-43,-45,-46,78,-56,-57,-58,-48,-49,-29,-19,87,88,104,105,-60,-22,-23,-14,-25,-26,-27,-31,-20,-21,-44,-32,-37,-33,-35,-41,-59,-38,-34,-39,-40,]),'FALSE':([24,25,30,38,39,41,50,51,52,53,55,56,65,70,71,73,87,88,93,95,97,99,113,],[46,46,-47,-17,-18,46,46,-56,-57,-58,-48,-49,-19,46,46,46,-20,-21,46,46,46,46,46,]),'TRUE':([24,25,30,38,39,41,50,51,52,53,55,56,65,70,71,73,87,88,93,95,97,99,113,],[47,47,-47,-17,-18,47,47,-56,-57,-58,-48,-49,-19,47,47,47,-20,-21,47,47,47,47,47,]),'TIMES':([29,33,35,36,64,80,81,83,84,85,86,],[-30,-29,60,-28,-29,60,60,-25,-26,-27,-31,]),'DIVIDE':([29,33,35,36,64,80,81,83,84,85,86,],[-30,-29,61,-28,-29,61,61,-25,-26,-27,-31,]),'POW':([29,33,35,36,64,80,81,83,84,85,86,],[-30,-29,62,-28,-29,62,62,-25,-26,-27,-31,]),'PLUS':([29,32,33,35,36,63,64,67,80,81,83,84,85,86,],[-30,57,-29,-24,-28,57,-29,57,-22,-23,-25,-26,-27,-31,]),'MINUS':([29,32,33,35,36,63,64,67,80,81,83,84,85,86,],[-30,58,-29,-24,-28,58,-29,58,-22,-23,-25,-26,-27,-31,]),'RPAREN':([29,30,35,36,42,43,44,45,46,47,48,55,56,63,64,68,80,81,83,84,85,86,89,91,92,94,96,98,102,103,104,108,109,110,111,119,],[-30,-47,-24,-28,69,-36,-42,-43,-45,-46,74,-48,-49,86,-29,89,-22,-23,-25,-26,-27,-31,-44,-32,-37,-33,-35,-41,114,-61,-62,-38,-34,-39,-40,122,]),'DOT':([33,54,],[59,79,]),'ARBRAC':([42,43,44,45,46,47,48,68,73,77,89,91,92,94,96,98,106,108,109,110,111,119,],[71,-36,-42,-43,-45,-46,71,71,99,71,-44,-32,-37,-33,-35,-41,115,-38,-34,-39,-40,71,]),'NOT':([42,43,44,45,46,47,48,68,77,89,91,92,94,96,98,108,109,110,111,119,],[73,-36,-42,-43,-45,-46,73,73,73,-44,-32,-37,-33,-35,-41,-38,-34,-39,-40,73,]),'ELSE':([117,],[121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt_list':([0,26,90,100,120,124,],[1,49,107,112,123,126,]),'stmt':([0,1,26,49,90,100,107,112,120,123,124,126,],[2,20,2,20,2,2,20,20,2,20,2,20,]),'include':([0,1,26,49,90,100,107,112,120,123,124,126,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'vardec':([0,1,26,27,49,90,100,107,112,120,123,124,126,],[4,4,4,52,4,4,4,4,4,4,4,4,4,]),'assaign':([0,1,26,27,49,76,90,100,107,112,120,123,124,126,],[5,5,5,51,5,103,5,5,5,5,5,5,5,5,]),'if':([0,1,26,49,90,100,107,112,120,123,124,126,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'while':([0,1,26,49,90,100,107,112,120,123,124,126,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while':([0,1,26,49,90,100,107,112,120,123,124,126,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'for':([0,1,26,49,90,100,107,112,120,123,124,126,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'types':([0,1,26,27,49,90,100,107,112,120,123,124,126,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'other_assaign':([22,],[30,]),'values':([22,40,],[31,66,]),'exp':([22,37,40,],[32,63,67,]),'term':([22,37,40,57,58,],[35,35,35,80,81,]),'factor':([22,37,40,57,58,60,61,62,],[36,36,36,36,36,83,84,85,]),'vardec2':([23,],[38,]),'con_exp':([24,25,41,50,113,],[42,48,68,77,119,]),'con_term':([24,25,41,50,70,71,73,93,95,97,99,113,],[43,43,43,43,92,92,92,108,92,92,92,43,]),'foropt1':([27,],[50,]),'others_vardec2':([40,],[65,]),'foropt2':([50,],[76,]),'other_con_exp':([70,71,73,95,97,99,],[91,94,98,109,110,111,]),'other_con_term2':([73,],[96,]),'foropt3':([76,],[102,]),'others_if':([107,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt_list","S'",1,None,None,None),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','compiler.py',167),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','compiler.py',168),
  ('stmt -> include','stmt',1,'p_stmt','compiler.py',171),
  ('stmt -> vardec','stmt',1,'p_stmt','compiler.py',172),
  ('stmt -> assaign','stmt',1,'p_stmt','compiler.py',173),
  ('stmt -> if','stmt',1,'p_stmt','compiler.py',174),
  ('stmt -> while','stmt',1,'p_stmt','compiler.py',175),
  ('stmt -> do_while','stmt',1,'p_stmt','compiler.py',176),
  ('stmt -> for','stmt',1,'p_stmt','compiler.py',177),
  ('include -> SHARP INCLUDE ALBRAC ID DOT ID ARBRAC','include',7,'p_include','compiler.py',180),
  ('types -> INT','types',1,'p_types','compiler.py',184),
  ('types -> FLOAT','types',1,'p_types','compiler.py',185),
  ('types -> CHAR','types',1,'p_types','compiler.py',186),
  ('values -> NUMBER DOT NUMBER','values',3,'p_values','compiler.py',190),
  ('values -> NUMBER','values',1,'p_values','compiler.py',191),
  ('values -> CHARV','values',1,'p_values','compiler.py',192),
  ('vardec -> types ID vardec2','vardec',3,'p_var_dec','compiler.py',195),
  ('vardec2 -> SEMI','vardec2',1,'p_var_dec2','compiler.py',201),
  ('vardec2 -> EQUALS others_vardec2','vardec2',2,'p_var_dec2','compiler.py',202),
  ('others_vardec2 -> values SEMI','others_vardec2',2,'p_var_dec2','compiler.py',203),
  ('others_vardec2 -> exp SEMI','others_vardec2',2,'p_var_dec2','compiler.py',204),
  ('exp -> exp PLUS term','exp',3,'p_calc_express1','compiler.py',208),
  ('exp -> exp MINUS term','exp',3,'p_calc_express1','compiler.py',209),
  ('exp -> term','exp',1,'p_calc_express1','compiler.py',210),
  ('term -> term TIMES factor','term',3,'p_calc_express2','compiler.py',212),
  ('term -> term DIVIDE factor','term',3,'p_calc_express2','compiler.py',213),
  ('term -> term POW factor','term',3,'p_calc_express2','compiler.py',214),
  ('term -> factor','term',1,'p_calc_express2','compiler.py',215),
  ('factor -> NUMBER','factor',1,'p_calc_express3','compiler.py',223),
  ('factor -> ID','factor',1,'p_calc_express3','compiler.py',224),
  ('factor -> LPAREN exp RPAREN','factor',3,'p_calc_express3','compiler.py',225),
  ('con_exp -> con_exp ALBRAC other_con_exp','con_exp',3,'p_condi_express1','compiler.py',232),
  ('con_exp -> con_exp ARBRAC other_con_exp','con_exp',3,'p_condi_express1','compiler.py',233),
  ('con_exp -> con_exp EQUALS EQUALS other_con_exp','con_exp',4,'p_condi_express1','compiler.py',234),
  ('con_exp -> con_exp NOT other_con_term2','con_exp',3,'p_condi_express1','compiler.py',235),
  ('con_exp -> con_term','con_exp',1,'p_condi_express1','compiler.py',236),
  ('other_con_exp -> con_term','other_con_exp',1,'p_condi_express1','compiler.py',237),
  ('other_con_exp -> EQUALS con_term','other_con_exp',2,'p_condi_express1','compiler.py',238),
  ('other_con_term2 -> ALBRAC other_con_exp','other_con_term2',2,'p_condi_express1','compiler.py',239),
  ('other_con_term2 -> ARBRAC other_con_exp','other_con_term2',2,'p_condi_express1','compiler.py',240),
  ('other_con_term2 -> other_con_exp','other_con_term2',1,'p_condi_express1','compiler.py',241),
  ('con_term -> ID','con_term',1,'p_condi_express2','compiler.py',244),
  ('con_term -> NUMBER','con_term',1,'p_condi_express2','compiler.py',245),
  ('con_term -> LPAREN con_exp RPAREN','con_term',3,'p_condi_express2','compiler.py',246),
  ('con_term -> FALSE','con_term',1,'p_condi_express2','compiler.py',247),
  ('con_term -> TRUE','con_term',1,'p_condi_express2','compiler.py',248),
  ('assaign -> ID EQUALS other_assaign','assaign',3,'p_assaign','compiler.py',251),
  ('other_assaign -> values SEMI','other_assaign',2,'p_assaign','compiler.py',252),
  ('other_assaign -> exp SEMI','other_assaign',2,'p_assaign','compiler.py',253),
  ('if -> IF LPAREN con_exp RPAREN LBRAC stmt_list others_if','if',7,'p_if','compiler.py',259),
  ('others_if -> RBRAC','others_if',1,'p_if','compiler.py',260),
  ('others_if -> RBRAC ELSE LBRAC stmt_list RBRAC','others_if',5,'p_if','compiler.py',261),
  ('while -> WHILE LPAREN con_exp RPAREN LBRAC stmt_list RBRAC','while',7,'p_while','compiler.py',264),
  ('do_while -> DO LBRAC stmt_list RBRAC WHILE LPAREN con_exp RPAREN','do_while',8,'p_do_while','compiler.py',267),
  ('for -> FOR LPAREN foropt1 foropt2 foropt3 RPAREN LBRAC stmt_list RBRAC','for',9,'p_for','compiler.py',270),
  ('foropt1 -> assaign','foropt1',1,'p_for','compiler.py',271),
  ('foropt1 -> vardec','foropt1',1,'p_for','compiler.py',272),
  ('foropt1 -> SEMI','foropt1',1,'p_for','compiler.py',273),
  ('foropt2 -> con_exp SEMI','foropt2',2,'p_for','compiler.py',274),
  ('foropt2 -> SEMI','foropt2',1,'p_for','compiler.py',275),
  ('foropt3 -> assaign','foropt3',1,'p_for','compiler.py',276),
  ('foropt3 -> SEMI','foropt3',1,'p_for','compiler.py',277),
]
